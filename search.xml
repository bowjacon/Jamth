<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>串口通信</title>
      <link href="/2023/08/27/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
      <url>/2023/08/27/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="通信常见类型">1.通信常见类型</h1><h2 id="按数据通信方式分类">1.1按数据通信方式分类</h2><blockquote><p>串行通信: 数据逐位按顺序依次传输 并行通信: 数据各位通过多条线同时传输</p></blockquote><hr><h2 id="按数据传输方向分类">1.2按数据传输方向分类</h2><blockquote><p>单工通信:数据只能沿一个方向传输 半双工通信:数据可以沿两个方向传输，但需要分时进行 全双工通信:数据可以同时进行双向传输</p></blockquote><hr><h2 id="按数据同步方式分类">1.3按数据同步方式分类</h2><blockquote><p>同步通信:共用同一时钟信号 异步通信:没有时钟信号，通过在数据信号中加入起始位或停止位等一些同步信号</p></blockquote><hr><h1 id="串口通信">2.串口通信</h1><h2 id="含义">2.1含义</h2><blockquote><p>通过发送和接收字节的位（bit）来进行通信</p></blockquote><hr><h2 id="通信接口">2.2通信接口</h2><blockquote><p>UART: 异步全双工通信 1-wire: 异步半双工 IIC: 同步半双工 SPI: 同步全双工</p></blockquote><hr><h2 id="异步通信协议">2.2 异步通信协议</h2><blockquote><p>启动位: 必须占1个位长，保持逻辑0电平 有效数据位: 可选5、6、7、8、9个位长，LSB在前，MSB在后 校验位: 可选占1个位长，也可以没有该位 停止位: 必须有，可选占0.5、1、1.5、2个位长，保持逻辑1电平</p></blockquote><hr><h1 id="引脚的复用与通用">2.3引脚的复用与通用</h1><blockquote><p>通用:IO端口的输入或输出是由GPIO外设控制，我们称之为通用 复用:O端口的输入或输出是由其它非GPIO外设控制，我们称之为复用</p></blockquote><hr><h1 id="波特率">3.波特率</h1><h2 id="计算公式f1系列">3.1 计算公式(F1系列)</h2><p><span class="math display">\[baud=fck/(16*USARTDIV)\]</span></p><hr><h2 id="寄存器bbr">3.2寄存器(BBR)</h2><blockquote><p>把USARTDIV的整数部分写入位[15:4],USARTDIV的小数部分写入[3:0]</p></blockquote><hr><h1 id="配置hal库步骤">4.配置HAL库步骤</h1><h2 id="配置串口工作参数">4.1配置串口工作参数</h2><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">HAL_UART_Init(); </span><br></pre></td></tr></tbody></table></figure><h2 id="串口底层初始化">4.2串口底层初始化</h2><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">HAL_UART_MspInit(); </span><br></pre></td></tr></tbody></table></figure><h2 id="开启异步接收中断">4.3开启异步接收中断</h2><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">HAL_UART_Receive_IT();</span><br></pre></td></tr></tbody></table></figure><h2 id="设置优先级使能中断">4.4设置优先级,使能中断</h2><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">HAL_NVIC_SetPriority(); </span><br><span class="line">HAL_NVIC_EnableIRQ();</span><br></pre></td></tr></tbody></table></figure><h2 id="编写中断服务函数">4.5编写中断服务函数</h2><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">USARTx_IRQHandler();</span><br><span class="line">UARTx_IRQHandler();</span><br></pre></td></tr></tbody></table></figure><h2 id="串口数据发送">4.6串口数据发送</h2><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">HAL_UART_Transmit();</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分类7                   （单片机） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云oss</title>
      <link href="/2023/08/24/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/08/24/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="阿里云oss配置图床">阿里云OSS配置图床</h1><h3 id="未下载picgo点击下方链接">未下载PicGo点击下方链接</h3><p><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.0/">此处为山东大学下载链接</a></p><p><a href="https://pan.baidu.com/s/1zx60RTHSgRt6CZI4ZGKaVw?pwd=ce7f">此处为百度网盘下载链接（提取码ce7f)</a></p><h3 id="注册阿里云账号">1.注册阿里云账号</h3><p><img src="https://bot.zzuli.life/image-20220522103509799.png"></p><h3 id="购买阿里云oss服务">2.购买阿里云oss服务</h3><p>搜索栏里搜索对象储存OSS，如下图</p><p><img src="https://bot.zzuli.life/image-20220522103648536.png"></p><p>选择需要购买的套餐</p><p><img src="https://bot.zzuli.life/image-20220522103856680.png"></p><h3 id="创建bucket">3.创建Bucket</h3><p>点击上方栏的控制台，进入对象存储OSS</p><p><img src="https://bot.zzuli.life/image-20220522104144078.png"></p><p>创建Bucket，并将读写权限设为公开读写，其他默认</p><p><img src="https://bot.zzuli.life/image-20220522104347124.png"></p><h3 id="配置picgo">4.配置PicGo</h3><p>进入PicGo,点击阿里云OSS</p><p><img src="https://bot.zzuli.life/image-20220522105002298.png"></p><p>返回阿里云控制台，光标移动至头像，点击AccessKey管理</p><p><img src="https://bot.zzuli.life/image-20220522105607668.png"></p><p>创建子用户，并勾选API</p><p><img src="https://bot.zzuli.life/image-20220522105820150.png"></p><p><img src="https://bot.zzuli.life/image-20220522105844899.png"></p><p><img src="https://bot.zzuli.life/image-20220522110056716.png"></p><p>返回Bucket列表，Bucket名称即存储空间名</p><p>点击Bucket名称，进入后点击概览，查看存储区域，这里即oss-cn-hangzhou</p><p><img src="https://bot.zzuli.life/image-20220522104656959.png"></p><p>其他默认即可</p>]]></content>
      
      
      <categories>
          
          <category> 分类3                   （教程） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>银行存取款</title>
      <link href="/2023/08/24/%E9%93%B6%E8%A1%8C%E5%AD%98%E5%8F%96%E6%AC%BE/"/>
      <url>/2023/08/24/%E9%93%B6%E8%A1%8C%E5%AD%98%E5%8F%96%E6%AC%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="packagebank">package:bank</h2><p>关于银行存取款的项目代码 </p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/******class: Account*****/</span></span><br><span class="line"><span class="keyword">package</span> bank;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> annualInterestRate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> id,<span class="type">double</span> balance,<span class="type">double</span> annualInterestRate)</span>{</span><br><span class="line">        <span class="built_in">this</span>.id=id;</span><br><span class="line">        <span class="built_in">this</span>.balance=balance;</span><br><span class="line">        <span class="built_in">this</span>.annualInterestRate=annualInterestRate;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> {</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnualInterestRate</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> annualInterestRate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnnualInterestRate</span><span class="params">(<span class="type">double</span> annualInterestRate)</span> {</span><br><span class="line">        <span class="built_in">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span>{</span><br><span class="line">      <span class="keyword">if</span>(balance &lt;amount) {System.out.println(<span class="string">"余额不足，取款失败"</span>);</span><br><span class="line">      balance -=amount;</span><br><span class="line">      }</span><br><span class="line">       <span class="keyword">else</span> System.out.println(<span class="string">"成功取出: "</span>+amount);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span>{</span><br><span class="line">       <span class="keyword">if</span>(amount&gt;<span class="number">0</span>) balance+=amount;</span><br><span class="line">        System.out.println(<span class="string">"成功存入: "</span>+amount);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/******class: Customer*****/</span></span><br><span class="line"><span class="keyword">package</span> bank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> {</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String f,String l)</span>{</span><br><span class="line">        <span class="built_in">this</span>.firstName=f;</span><br><span class="line">        <span class="built_in">this</span>.lastName=l;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirstName</span><span class="params">(String firstName)</span> {</span><br><span class="line">        <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> {</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">getAccount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccount</span><span class="params">(Account account)</span> {</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/******class: CustomeTestr*****/</span></span><br><span class="line"><span class="keyword">package</span> bank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerTest</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        Customer cust=<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">"Jane"</span>,<span class="string">"Smith"</span>);</span><br><span class="line">        <span class="type">Account</span> <span class="variable">acct</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Account</span> (<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">0.0123</span>);</span><br><span class="line">        cust.setAccount(acct);</span><br><span class="line">        cust.getAccount().deposit(<span class="number">100</span>);</span><br><span class="line">        cust.getAccount().withdraw(<span class="number">960</span>);</span><br><span class="line">        cust.getAccount().withdraw(<span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">"Customer: "</span>+cust.getFirstName()+<span class="string">","</span>+cust.getLastName()+<span class="string">",id is "</span>+cust.getAccount().getId());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p><p>注意点：</p><p><code>cust.getAccount().deposit(100);</code></p><p><code>cust.getAccount().withdraw(960);</code></p><p><code>cust.getAccount().withdraw(200);</code></p><p>到<code>class:Customer</code>，返回account，account为<code>class:Account</code>，然后找到deposit、withdraw <code>method</code>进行调用</p>]]></content>
      
      
      <categories>
          
          <category> 分类2                   （Java学习笔记） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常小报错</title>
      <link href="/2023/08/24/%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/24/%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日常报错">日常报错</h1><p>写代码时出现以下报错是因为类重名了 <img src="https://bot.zzuli.life/image-20220522114858242.png"></p><p><img src="https://bot.zzuli.life/image-20220522115101815.png"></p><p>在不同 class文件中，并不区分大小写，可写入static类型规避</p><p><img src="https://bot.zzuli.life/image-20220522115030099.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分类2                   （Java学习笔记） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>zerotier客户端连入moon节点</title>
      <link href="/2023/08/24/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/24/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="zerotier局域网客户端配置">zerotier局域网客户端配置</h2><p>windows首先安装镜像文件到本机</p><p><img src="https://bot.zzuli.life/image-20230609144623942.png"></p><p>安装成功后右击zerotier软件，点击'Join New Network'</p><p><img src="https://bot.zzuli.life/image-20230609144815649.png"></p><p>在输入框内填入局域网idID</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">52b337794f50dc4d</span><br></pre></td></tr></tbody></table></figure><p><img src="https://bot.zzuli.life/image-20230609144932144.png"></p><p>在点击"Join"之后会显示以加入局域网的ID，如下图中红框内容</p><p><img src="https://bot.zzuli.life/image-20230609145304218.png"></p><p>在服务端可显示已加入的设备和分配的虚拟IP地址</p><p><img src="https://bot.zzuli.life/image-20230609145538216.png"></p><p>虽然局域网搭建好了，但是由于zerotier服务器在国外，十分不稳定，故需要"跳板"服务器来进行中转，原理如下</p><p><img src="https://bot.zzuli.life/image-20230609145942342.png"></p><p>下面演示如何在客户端加入moon节点。zerotier正常安装后，在系统c盘的Program Files (x86)内找到zerotier文件夹，进入后发现还有one文件夹，</p><p><img src="https://bot.zzuli.life/image-20230609150500779.png"></p><p>运行zerotier指令需要在one文件夹内，于是首先要以管理员权限运行cmd</p><p><img src="https://bot.zzuli.life/image-20230609150143721.png"></p><p>输入指令进入到one文件夹内，加入moon节点，成功后则显示"200 orbit ok"，在域网内成员列表中可看到各个成员，以及根服务器地址后可看到ip地址以及显示为moon模式，则客户端加入moon节点成功</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cd /d C:\Program Files (x86)\ZeroTier\One</span><br><span class="line">zerotier-cli orbit 2fce4db2b2 2fce4db2b2</span><br><span class="line">zerotier-cli listpeers</span><br></pre></td></tr></tbody></table></figure><p><img src="https://bot.zzuli.life/image-20230609151709817.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分类4                   （搭建局域网络） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单片机知识扫盲</title>
      <link href="/2023/08/24/%E5%8D%95%E7%89%87%E6%9C%BA%E7%9F%A5%E8%AF%86%E6%89%AB%E7%9B%B2/"/>
      <url>/2023/08/24/%E5%8D%95%E7%89%87%E6%9C%BA%E7%9F%A5%E8%AF%86%E6%89%AB%E7%9B%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一模电知识">一、模电知识</h2><h3 id="推挽输出与开漏输出">1.推挽输出与开漏输出</h3><p><img src="https://bot.zzuli.life/%E7%A4%BA%E6%84%8F%E5%9B%BE.svg"></p><p><img src="https://bot.zzuli.life/%E6%8E%A8%E6%8C%BD.svg"></p><p><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>注意:开漏输出需外接上拉电阻。</p><h3 id="半导体结构">2.半导体结构</h3><h4 id="三极管">①三极管</h4><center><img src=" https://bot.zzuli.life/%E4%B8%89%E6%9E%81%E7%AE%A1.svg" width="30%"></center><h4 id="mos管">②MOS管</h4><center><img src=" https://bot.zzuli.life/NMOS.svg" width="30%"></center><h1 id="二数电知识">二、数电知识</h1><h2 id="模拟信号与数字信号">1.模拟信号与数字信号</h2><p>模拟信号（Analog signal）是连续的信号,在范围内的任意时刻内可被测量。数字信号（Digital Signal）是离散的信号，它的数值只能在有限的数值集合中取值。</p><h2 id="位与字节">2.位与字节</h2><p><img src="https://bot.zzuli.life/%E5%AD%97%E8%8A%82.svg"></p><p><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>注意:1个比特表示一个2进制，1位表示两个16进制。</p><h1 id="三c语言">三、C语言</h1><h2 id="左移与右移">1.左移与右移</h2><p>右移相当于将该数字的二进制向右移动一位,将末尾的数字截掉;反之,左移相当于将该数字的二进制向左移动一位,末尾补零</p><p><img src="https://bot.zzuli.life/%E8%BF%90%E7%AE%97%E7%AC%A6.jpg"></p><h1 id="四基础电路">四、基础电路</h1><h2 id="诺顿定理与戴维宁定理">1.诺顿定理与戴维宁定理</h2><p>①戴维宁等效电路</p><p><img src="https://bot.zzuli.life/%E6%94%B9%E5%9B%BE%E7%A5%9E%E5%99%A8_365x220.jpeg"></p><p>②诺顿等效电路</p><p><img src="https://bot.zzuli.life/%E6%94%B9%E5%9B%BE%E7%A5%9E%E5%99%A8_400x238.png"></p><ol type="1"><li><p>外电路可以是任意的线性或非线性电路，外电路发生改变时，含源一端口网路的等效电路不变(伏-安特性等效)，当一端口内部含有受控源时，控制电路与受控源必须包含在被化简的同一部分电路中。</p></li><li><p>若一端口网路的等效电阻R<sub>eq</sub>=0,该一端口网路只有戴维宁等效电路，无诺顿等效电路;若一端口网路的等效电阻R<sub>eq</sub>=∞，该一端口网络只有诺段等效电路，无戴维宁等效电路。</p></li><li><p>戴维宁定理及诺顿定理相当于替换整条伏安特性曲线，替代定理相当于替换伏安特性曲线上一点。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分类7                   （单片机） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Typroa使用</title>
      <link href="/2023/08/24/Typroa%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/24/Typroa%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="markdown数学公式学习">MarkDown数学公式学习</h1><h2 id="公式环境">1.公式环境</h2><ul><li>单$<ul><li>行内</li></ul></li><li>双$$<ul><li>单独一行居中</li></ul></li></ul><h2 id="角标">2. 角标</h2><ul><li>上标：<code>^</code>。例如：(2^5)</li><li>下标：<code>_</code>。例如：(H_2O)</li></ul><h2 id="运算符">3.运算符</h2><ul><li><p>乘法</p><ul><li>点乘：<code>\cdot</code>(dot：点)。例如：(2  = 6)</li><li>叉乘：<code>\times</code>(times：乘以)。例如：(2  = 6)</li></ul></li><li><p>除法</p><ul><li><p>除号：<code>\div</code>(divsion：除法)。例如：(6  = 3)</p></li><li><p>分号：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\frac{分子}{分母}</span><br></pre></td></tr></tbody></table></figure><p>(fraction：分数)。例如：(=3)</p><ul><li>大一点的分号：<code>\dfrac{分字}{分母}</code>。例如：(=3)</li></ul></li></ul></li><li><p>加减号</p><ul><li>同±号：<code>\pm</code>(Plus minus：正负号)。例如：(2)</li></ul></li><li><p>根号</p><ul><li>平方根号：<code>\sqrt{num}</code>(square root：平方根)。例如：(=2)</li></ul></li><li><p>异或</p><ul><li>异或：<code>\oplus</code>(oval：椭圆 plus：加号)。例如：(AB)</li><li>同或：<code>\odot</code>(oval：椭圆 dot：点)。例如：(ABC =ABC)</li></ul></li><li><p>和</p><ul><li>和：<code>\sum</code>。例如(_{i=0}^5)</li></ul></li></ul><h2 id="关系符">4. 关系符</h2><ul><li>比大小<ul><li>大于等于：<code>\geq</code>(greater：较大的 equal：相等的 )。例如：(3)</li><li>小于等于：<code>\leq</code>(less：较小的 equal：相等的)。例如：(2)</li><li>约等于：<code>\approx</code>(approx：大约)。例如：(2.1)</li></ul></li><li>集合相关<ul><li>属于：<code>\in</code>(in：在……之内)。例如：(AB)</li><li>交集：<code>\cap</code>。例如：(AB)</li><li>并集：<code>\cup</code>。例如：(AB)</li></ul></li><li>分隔符<ul><li>绝对值：<code>\vert</code>。利润()</li></ul></li><li>化学加热符<ul><li>化学加热符：<code>\triangleq</code>(triangularity：三角形 )。例如(Cu_2(OH)_2CO_32CuO+H_2O+ CO_2↑)</li></ul></li><li>积分<ul><li>积分号：<code>\int</code>(integral：积分)。例如：(_{m}^{n})</li><li>被积式：<code>\mathrm{dv}</code>(math：数学 rome：罗马)。例如：(f(x)=F(x)+C)</li></ul></li></ul><h2 id="希腊字母">5.希腊字母</h2><ul><li>alpha：<code>\alpha</code>。()</li><li>beta：<code>\beta</code>。()</li><li>epsilon：<code>\epsilon</code>。()</li><li>theta：<code>\theta</code>。()</li><li>lambda：<code>\lambda</code>。()</li><li>rho：<code>\rho</code>。()</li></ul><h2 id="箭头">6.箭头</h2><ul><li>向量<ul><li>向量：<code>\vec{}</code>。例如：()</li></ul></li><li>双箭头<ul><li>向右推出符：<code>\Longrightarrow</code>(Long：长的 right：右边 arrow：箭头)。例如：(AB)</li><li>向左推出符：<code>\Longleftarrow</code>(left：左边)。例如：(AB)</li></ul></li><li>单箭头<ul><li>向右推出符：<code>\longrightarrow</code>。例如：(AB)</li><li>向左推出符：<code>\longleftarrow</code>。例如：(AB)</li></ul></li></ul><h2 id="其他">7.其他</h2><ul><li>空格<ul><li>单空格：<code>\quad</code>。例如：(AB)</li><li>多空格：<code>\qquad</code>。例如：(AB)</li></ul></li><li>无穷<ul><li>无穷：<code>\infin</code>(infinite：无限的)。例如：()</li></ul></li><li>将角标转换为上下<ul><li><code>\limits</code>。例如(_{n}^{m})</li></ul></li><li>换行<ul><li><code>\\</code>。例如(A\B)</li></ul></li></ul><h2 id="数学环境-大括号">8.数学环境-大括号</h2><p><code>\left\{ \begin{array}{rcl}XXXXX\end{array}\right.</code>。例如：</p>[{<span class="math display">\[\begin{array}{rcl} a=b+c\\b=a+c \end{array}\]</span><p>. ]</p><h3 id="数学环境-矩阵">9.数学环境-矩阵</h3><p><code>\left\[\matrix{XXXXX}\right]</code>。例如：</p><p>[a = ]</p>]]></content>
      
      
      <categories>
          
          <category> 分类3                   （教程） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记</title>
      <link href="/2023/08/24/Java%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/24/Java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="java学习笔记">Java学习笔记</h1><h3 id="基础框架">1.基础框架</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>{</span><br><span class="line">        System.out.println(<span class="string">"hello,world"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="scanner">2.Scanner</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br></pre></td></tr></tbody></table></figure><p>调用Scanner类，称为<strong>导包</strong> </p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Sacanner</span>(System.in) ;</span><br></pre></td></tr></tbody></table></figure><p></p><p>以上含义是从键盘中读入</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>scan.next();            </span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span>scan.nextInt();            </span><br><span class="line"><span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span>scan.nextDouble();    </span><br><span class="line"><span class="type">boolean</span> love=scan.nex.nextBoolean(); </span><br></pre></td></tr></tbody></table></figure><h3 id="数组声明">3.数组声明</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*一维数组*/</span></span><br><span class="line"><span class="type">int</span> []a=<span class="keyword">new</span> <span class="title class_">int</span> []{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>}; </span><br><span class="line">String []b=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">/*二维数组*/</span></span><br><span class="line"><span class="type">int</span> [][]arr=<span class="keyword">new</span> <span class="title class_">int</span> [][]{{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>},{<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>},{<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>}};</span><br><span class="line">String [][]brr=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>][<span class="number">4</span>];</span><br></pre></td></tr></tbody></table></figure><h3 id="arrays工具">4.Arrays工具</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(<span class="type">int</span>[]a,<span class="type">int</span> []b)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span>Arrays.eqals(a,b);</span><br><span class="line"><span class="number">2.</span>String  <span class="title function_">toString</span><span class="params">(<span class="type">int</span>[]a)</span>;</span><br><span class="line">    System.out.println(Arrays.toSting(a)); </span><br><span class="line"><span class="number">3.</span><span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[] a,<span class="type">int</span> nums)</span>;</span><br><span class="line">    Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line"><span class="number">4.</span><span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> []a)</span>;</span><br><span class="line">    Arrays.sort(a);</span><br><span class="line"><span class="number">5.</span><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> []a,<span class="type">int</span> key)</span></span><br><span class="line">    Arrays.binarySearch(a,key);</span><br></pre></td></tr></tbody></table></figure><h3 id="局部变量">5.局部变量</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">study</span><span class="params">()</span>{</span><br><span class="line">       System.out.println(<span class="string">"study"</span>);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>输入<code>study（）；</code>即可调用<em>study</em>变量 </p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">(<span class="type">double</span> r)</span>{</span><br><span class="line">    <span class="keyword">return</span> Math.PI*r*r;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>直接<code>area（xx);</code>可使用<em>area</em>方法计算 </p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exer3Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>{</span><br><span class="line">        Exer3Test test=<span class="keyword">new</span> <span class="title class_">Exer3Test</span>();</span><br><span class="line">        test .method();</span><br><span class="line">     }</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">             <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)System.out.print(<span class="string">"*"</span>);</span><br><span class="line">             System.out.println();</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> 声明<em>test</em>形参后，调用method对象<p></p><h3 id="方法重载">6.方法重载</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exer</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>{</span><br><span class="line">           mass m=<span class="keyword">new</span> <span class="title class_">mass</span>();</span><br><span class="line">           System.out.println(m.max(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">           System.out.println(m.max(<span class="number">1.0</span>,<span class="number">1.1</span>));</span><br><span class="line">           System.out.println(m.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mass</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>{</span><br><span class="line">        <span class="keyword">return</span> Math.max(i,j);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> i,<span class="type">double</span> j)</span>{</span><br><span class="line">        <span class="keyword">return</span> Math.max(i,j);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> i,<span class="type">double</span> j,<span class="type">double</span> k)</span>{</span><br><span class="line">        <span class="keyword">return</span> Math.max(i,Math.max(j,k));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>重载要求<strong>类别、方法名称</strong>一致，<strong>列表不一致</strong> </p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i)</span>{</span><br><span class="line">   System.out.println(<span class="string">"1"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String str)</span>{</span><br><span class="line">   System.out.println(<span class="string">"2"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String...str)</span>{</span><br><span class="line">   System.out.println(<span class="string">"3"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> 可变个数形参：无合适匹配对象，进行匹配<p></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">n.show(<span class="string">"hello"</span>);</span><br><span class="line">n.show(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="this封装">7.this、封装</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Private</code>只能用该类中<code>method</code>修改，调出</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String f,String l)</span>{</span><br><span class="line">    <span class="built_in">this</span>.firstName=f;</span><br><span class="line">    <span class="built_in">this</span>.lastName=l;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>this</code>调用属性时，须放在<code>method</code>中首行，默认首个对象，且无法调用自身</p><h3 id="继承重写super">8.继承、重写、super</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mankind</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">int</span> sex)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">int</span> salary)</span> {</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">manOrWoman</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">if</span>(sex==<span class="number">1</span>) System.out.println(<span class="string">"man"</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">"woman"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">employeed</span><span class="params">()</span>{</span><br><span class="line">        String jobinfo=(salary==<span class="number">0</span>)?<span class="string">"no job"</span>:<span class="string">"job"</span>;</span><br><span class="line">        System.out.println(jobinfo);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Kids</span> <span class="keyword">extends</span> <span class="title class_">Mankind</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> yeasOld;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Kids</span><span class="params">(<span class="type">int</span> yesOld)</span>{</span><br><span class="line">        <span class="built_in">this</span>.yeasOld=yesOld;</span><br><span class="line">    }</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAge</span><span class="params">()</span>{</span><br><span class="line">       System.out.println(<span class="string">"I am "</span>+yeasOld+<span class="string">" years old"</span>);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KidsTest</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>{</span><br><span class="line">        Kids somekid=<span class="keyword">new</span> <span class="title class_">Kids</span>(<span class="number">12</span>);</span><br><span class="line">        somekid.printAge();</span><br><span class="line">        somekid.setSalary(<span class="number">0</span>);</span><br><span class="line">        somekid.setSex(<span class="number">1</span>);</span><br><span class="line">        somekid.employeed();</span><br><span class="line">        somekid.manOrWoman();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Kids继承Mankid中的属性方法</p><p><code>方法的声明：权限修饰符 返回值类型 方法名（形参列表）{</code></p><p>​ <code>//方法</code></p><p>​ <code>}</code></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"学习知识"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> <span class="keyword">extends</span> <span class="title class_">person</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">learn</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"学习专业知识"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">show</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        student stu=<span class="keyword">new</span> <span class="title class_">student</span>();</span><br><span class="line">        stu.learn();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>重写规则：</p><ul><li>父类子类形参列表相同</li><li>子类权限修饰符不小于父类</li><li>父类为void型，子类一致</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> {</span><br><span class="line">    <span class="type">int</span> id=<span class="number">1001</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> <span class="keyword">extends</span> <span class="title class_">person</span>{</span><br><span class="line">    <span class="type">int</span> id=<span class="number">1002</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"身份证为： "</span>+<span class="built_in">super</span>.id+<span class="string">" 学号为： "</span>+id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">show</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        student stu=<span class="keyword">new</span> <span class="title class_">student</span>();</span><br><span class="line">        stu.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>super理解为父类的，可以调用父类属性</p>]]></content>
      
      
      <categories>
          
          <category> 分类2                   （Java学习笔记） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(四)撤销操作</title>
      <link href="/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="撤销推送">撤销推送</h1><p>假如你写了错误的代码，如下所示</p><p><img src="https://bot.zzuli.life/image-20230710151718085.png"></p><p><img src="https://bot.zzuli.life/image-20230710152107441.png"></p><p>右键仓库，选择“<code>显示日志</code>”</p><p><img src="https://bot.zzuli.life/image-20230710152233016.png"></p><p>右键你提交之前的版本，然后选择重置到此版本</p><p><img src="https://bot.zzuli.life/image-20230710152439633.png"></p><p>再次右键本地仓库，选择“<code>同步</code>”</p><p><img src="https://bot.zzuli.life/image-20230710152837467.png"></p><p>勾选“<code>强制</code>”，本地和远端分支注意都为master</p><p><img src="https://bot.zzuli.life/image-20230710152946432.png"></p><p>若如下图所示，则撤销成功</p><p><img src="https://bot.zzuli.life/image-20230710153120011.png"></p><p><img src="https://bot.zzuli.life/image-20230710153105714.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分类5                   （Github多人协作） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(五)更新仓库</title>
      <link href="/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>右键本地仓库，选择拉取</p><p><img src="https://bot.zzuli.life/image-20230711211152039.png"></p><p>这里主要选择“<code>master</code>”分支，因为这为最新预览分支</p><p><img src="https://bot.zzuli.life/image-20230711211345682.png"></p><p>若如下图所示，则更新仓库成功</p><p><img src="https://bot.zzuli.life/image-20230711211640246.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分类5                   （Github多人协作） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(二)本地子分支创建与推送</title>
      <link href="/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一创建本地子分支">一、创建本地子分支</h1><p>右键本地仓库，选择“<code>切换/检出</code>”</p><p><img src="https://bot.zzuli.life/image-20230707164547368.png"></p><p>勾选“<code>创建新分支</code>”，名字为“<code>master</code>”</p><p><img src="https://bot.zzuli.life/image-20230707164809470.png"></p><h1 id="推送本地子分支">推送本地子分支</h1><p>右键本地仓库，点击“<code>推送</code>”</p><p><img src="https://bot.zzuli.life/image-20230707165108556.png"></p><p>选择“<code>master</code>”，点击确定</p><p><img src="https://bot.zzuli.life/image-20230707165353165.png"></p><p>如下图则完成推送本地子分支“<code>master</code>”</p><p><img src="https://bot.zzuli.life/image-20230707165522433.png"></p><p>在<a href="https://github.com/bowjacon/BIM_Demo/tree/main">github仓库</a>中如下操作即可看到提交的本地子分支</p><p><img src="https://bot.zzuli.life/image-20230707170057429.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分类5                   （Github多人协作） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(三)提交与推送文件</title>
      <link href="/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一提交修改文件内容">（一）提交修改文件内容</h1><p>假如你要修改某个代码文件，如下图中的“新建文本.c”文件</p><p><img src="https://bot.zzuli.life/image-20230709165331578.png"></p><p>打开后添加你要修改的内容，例如给代码添加一行注释</p><p><img src="https://bot.zzuli.life/image-20230709165731429.png"></p><p>右键文件，选择“<code>提交-&gt;"master"...</code>”</p><p><img src="https://bot.zzuli.life/image-20230709165952129.png"></p><p>在提交中补充相关注释信息，尽量对修改的内容描述清晰</p><p><img src="https://bot.zzuli.life/image-20230709170415662.png"></p><p>若结果如下图，则提交成功（请勿关闭该窗口）</p><p><img src="https://bot.zzuli.life/image-20230709170512990.png"></p><h1 id="二推送修改文件内容">（二）推送修改文件内容</h1><p>在提交之后，点击推送</p><p><img src="https://bot.zzuli.life/image-20230709170748379.png"></p><p>注意选择的分支，本地和远端都选择“<code>master</code>”分支</p><p><img src="https://bot.zzuli.life/image-20230709170933296.png"></p><p>若如下图所示，则成功推送文件</p><p><img src="https://bot.zzuli.life/image-20230709171056601.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分类5                   （Github多人协作） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(一)克隆Github仓库到本地</title>
      <link href="/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/08/24/Github%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在无包含中文路径的文件夹中右键 <img src="https://bot.zzuli.life/20230704153651.png" alt="image.png"> 单击Clone，然后在URL栏粘贴仓库的地址 <img src="https://bot.zzuli.life/20230704154144.png" alt="image.png"> 仓库地址如下 <img src="https://bot.zzuli.life/20230704155427.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分类5                   （Github多人协作） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="/2023/08/24/Dijkstra/"/>
      <url>/2023/08/24/Dijkstra/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="dijkstra算法基础入门">Dijkstra算法基础入门</h1><p>[TOC]</p><h2 id="前言">前言</h2><blockquote><p>Dijkstra是一种寻找最短路径的算法，虽然思维容易理解，但入门稍有难度。为了方便以后理解，于是写下这篇文章。若文章含有错误，欢迎各位纠正QwQ</p></blockquote><hr><h2 id="dijkstra的c代码">1.Dijkstra的C代码</h2><p>为了方便大家复制，就先把代码放这了</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//#define INF    0x7f7f7f7f</span></span><br><span class="line"><span class="comment">//#define MAXSIZE 1000;  </span></span><br><span class="line"><span class="comment">//int map[MAXSIZE][MAXSIZE], dp[MAXSIZE], used[MAXSIZE]; </span></span><br><span class="line"><span class="comment">//INF:int型最大值</span></span><br><span class="line"><span class="comment">//map:存储各个节点之间的距离</span></span><br><span class="line"><span class="comment">//dp:存储当前最短路径</span></span><br><span class="line"><span class="comment">//num:所有节点个数</span></span><br><span class="line"><span class="comment">//used:记录是否建立了最短路径</span></span><br><span class="line"><span class="comment">//index:访问节点的索引值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span> <span class="params">()</span>  {  </span><br><span class="line">    <span class="type">int</span> i, j ;  </span><br><span class="line">    <span class="type">int</span> min, index;  </span><br><span class="line">    <span class="built_in">memset</span> (used, <span class="number">0</span>, <span class="keyword">sizeof</span> (used)) ;   </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= num ; ++i)dp[i] = <span class="built_in">map</span>[<span class="number">0</span>][i] ;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= num ; ++i) {  </span><br><span class="line">        min = INF ;  </span><br><span class="line">        index = <span class="number">0</span> ;       </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= num ; ++j)  </span><br><span class="line">            <span class="keyword">if</span> (used[j]==<span class="number">0</span>&amp;&amp; dp[j] &lt; min){  </span><br><span class="line">                index = j ;  </span><br><span class="line">                min  = dp[j] ;  </span><br><span class="line">            }  </span><br><span class="line">        used[index] = <span class="number">1</span> ;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= num ; ++j)</span><br><span class="line"><span class="keyword">if</span> (used[j]==<span class="number">0</span>&amp;&amp; dp[index] + <span class="built_in">map</span>[index][j] &lt; dp[j])</span><br><span class="line">dp[j] = dp[index] + <span class="built_in">map</span>[index][j] ;  </span><br><span class="line">} </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="dijkstra核心解析">2.Dijkstra核心解析</h2><h4 id="构建map对数据结构了解可直接跳过">1.构建map（对数据结构了解可直接跳过）</h4><p>假如我们得到如下一堆数据（各个节点之间的距离）</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">A↔D：6</span><br><span class="line"></span><br><span class="line">A↔B：3</span><br><span class="line"></span><br><span class="line">B↔D：2</span><br><span class="line"></span><br><span class="line">B↔E：5</span><br><span class="line"></span><br><span class="line">B↔C：3</span><br><span class="line"></span><br><span class="line">E↔F：5</span><br></pre></td></tr></tbody></table></figure><p>将数据化成如下二叉树</p><p><img src="https://bot.zzuli.life/image-20230309223449245.png"></p><p>从图中可以看出A与A之间的距离显然为0，A与B、D相连，距离分别是3、6，但C、E、F均不与A相连，为了能够表示其他节点不与A相连，于是我们不妨将A与不相连节点之间的距离设为∞，（即为代码中的INF），则得到如下一组数据</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">03INF6INFINF</span><br></pre></td></tr></tbody></table></figure><p>同样我们分别对其他节点分析，可得到另外几组数据，将这几组数据汇聚在一起，就是map（如下表格）</p><table><thead><tr class="header"><th style="text-align: center;">0</th><th style="text-align: center;">3</th><th style="text-align: center;">INF</th><th style="text-align: center;">6</th><th style="text-align: center;">INF</th><th style="text-align: center;">INF</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">0</td><td style="text-align: center;">3</td><td style="text-align: center;">2</td><td style="text-align: center;">4</td><td style="text-align: center;">INF</td></tr><tr class="even"><td style="text-align: center;">INF</td><td style="text-align: center;">3</td><td style="text-align: center;">0</td><td style="text-align: center;">INF</td><td style="text-align: center;">INF</td><td style="text-align: center;">INF</td></tr><tr class="odd"><td style="text-align: center;">6</td><td style="text-align: center;">2</td><td style="text-align: center;">INF</td><td style="text-align: center;">0</td><td style="text-align: center;">INF</td><td style="text-align: center;">INF</td></tr><tr class="even"><td style="text-align: center;">INF</td><td style="text-align: center;">4</td><td style="text-align: center;">INF</td><td style="text-align: center;">INF</td><td style="text-align: center;">0</td><td style="text-align: center;">5</td></tr><tr class="odd"><td style="text-align: center;">INF</td><td style="text-align: center;">INF</td><td style="text-align: center;">INF</td><td style="text-align: center;">INF</td><td style="text-align: center;">5</td><td style="text-align: center;">0</td></tr></tbody></table><h4 id="更新dpi">2.更新dp[i]</h4><p>假设我们要求某节点与目标节点的dp[i]（在遍历过的节点中取得的最短的路径），总共有两种情况，第一种是与[已经确定的最短路径]==（遍历完所有节点都不会再找到更短的路径）==的节点直接相连，第二种是直接与目标节点相连。</p><p><img src="https://bot.zzuli.life/image-20230310181209490.png"></p><p>这时可能有人发出疑问：假如是有多条路径都比节点直接与目标节点相连的距离要短该怎么求？（如下图）</p><p><img src="https://bot.zzuli.life/image-20230310184943074.png"></p><p>其实解决方法很简单，因为dp中存储的就是[当前最短的路径]，已经包含了第二种情况，我们只要将dp中存储的[当前最短路径]和第一种情况的路径相比就行了，哪个路径更短，则取较短的路径为dp[i]，给出以下公式</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">dp[i]=min{dp[i],dp[m]+map[m][i]}</span><br><span class="line">注：m为已确定[最短路径]的节点。</span><br></pre></td></tr></tbody></table></figure><h4 id="确定最短路径">3.确定最短路径</h4><p>既然知道怎么求[当前最短路径]，那么如何将该节点的最短路径确定下来？解决方法就是[按最短路径从小到大来确定]，从求[当前最短路径]可以看出影响该节点的只有比它更短路径的节点（之前图中的红、黄、蓝节点的路径均比紫色节点的路径短），给出以下结论</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">如果dp中未确定的路径都不小于它的路径，那么此时该节点的最短路径则确定下来</span><br></pre></td></tr></tbody></table></figure><h2 id="dijkstra动态过程">3.Dijkstra动态过程</h2><p>首先遍历到B节点，B节点满足[未确定最短路径]和[小于min]两个条件，将3赋值给min</p><p><img src="https://bot.zzuli.life/Dijktra1.gif"></p><p>之后遍历到D节点时，虽然满足[未确定最短路径]，但min此时的值为3，即不满足[小于min]这个条件，故跳过D点</p><p><img src="https://bot.zzuli.life/Dijktra4.gif"></p><p>最后遍历C、E、F节点时，同样发现不满足[小于min]这个条件，对全过程进行分析，最后筛选得到B节点符合条件，故把它与A之间的路径确定为最短路径（如果不懂，可以回到上面看结论）</p><p><img src="https://bot.zzuli.life/Dijktra3.gif"></p><p>每当有一个最短路径被确定,我们就需要更新一次dp</p><p><img src="https://bot.zzuli.life/Dijktra5.gif"></p><p>重新寻找符合两个条件的节点，确认最短路径，然后更新dp，重复此步骤。（先确定C还是D无所谓，因为两者在当前的最短路径相等）</p><p><img src="https://bot.zzuli.life/Dijktra6.gif"></p><h2 id="dijkstra算法实战">4.Dijkstra算法实战</h2><p>题目链接:<a href="http://acm.zzuli.edu.cn/problem.php?id=1263">zzulioj1263:一个人的旅行</a></p><p><img src="https://bot.zzuli.life/image-20230310214946840.png"></p><p>样例输入</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">6 2 3</span><br><span class="line">1 3 5</span><br><span class="line">1 4 7</span><br><span class="line">2 8 12</span><br><span class="line">3 8 4</span><br><span class="line">4 9 12</span><br><span class="line">9 10 2</span><br><span class="line">1 2</span><br><span class="line">8 9 10</span><br></pre></td></tr></tbody></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></tbody></table></figure><p>Dijkstra算法参考代码</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">   </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(a, b) (((a) &gt; (b)) ? (a) : (b))  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a, b) (((a) &lt; (b)) ? (a) : (b))  </span></span><br><span class="line">   </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> infinity    0x7f7f7f7f  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> minus_inf    0x80808080  </span></span><br><span class="line">   </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 1009  </span></span><br><span class="line">   </span><br><span class="line"><span class="type">int</span> road, neigh, dest, cityNum, minTime ;  </span><br><span class="line"><span class="type">int</span> <span class="built_in">map</span>[MAXSIZE][MAXSIZE], dp[MAXSIZE], used[MAXSIZE], want[MAXSIZE] ;  </span><br><span class="line">   </span><br><span class="line"><span class="type">void</span> <span class="title function_">dijkstra</span> <span class="params">()</span>  </span><br><span class="line">{  </span><br><span class="line">    <span class="type">int</span> i, j ;  </span><br><span class="line">    <span class="type">int</span> minPath, iminPath ;  </span><br><span class="line">    <span class="built_in">memset</span> (used, <span class="number">0</span>, <span class="keyword">sizeof</span> (used)) ;   </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= cityNum ; ++i) dp[i] = <span class="built_in">map</span>[<span class="number">0</span>][i] ;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= cityNum ; ++i)  {  </span><br><span class="line">        minPath = infinity ;  </span><br><span class="line">        iminPath = <span class="number">0</span> ;     </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= cityNum ; ++j)  </span><br><span class="line">            <span class="keyword">if</span> (!used[j] &amp;&amp; dp[j] &lt; minPath)  {  </span><br><span class="line">                iminPath = j ;  </span><br><span class="line">                minPath  = dp[j] ;  </span><br><span class="line">            }  </span><br><span class="line">        used[iminPath] = <span class="number">1</span> ;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt;= cityNum ; ++j) <span class="keyword">if</span> (!used[j] &amp;&amp; dp[iminPath] + <span class="built_in">map</span>[iminPath][j] &lt; dp[j]) dp[j] = dp[iminPath] + <span class="built_in">map</span>[iminPath][j] ;  </span><br><span class="line">    }</span><br><span class="line">    minTime = dp[want[<span class="number">1</span>]] ;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span> ; i &lt;= dest ; ++i)    minTime = min (minTime, dp[want[i]]) ;  </span><br><span class="line">}  </span><br><span class="line">   </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span>  </span><br><span class="line">{  </span><br><span class="line">    <span class="type">int</span> i, j ;  </span><br><span class="line">    <span class="type">int</span> a, b, c ;  </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d%d%d"</span>, &amp;road, &amp;neigh, &amp;dest) != EOF){  </span><br><span class="line">        <span class="built_in">memset</span> (<span class="built_in">map</span>, infinity, <span class="keyword">sizeof</span> (<span class="built_in">map</span>)) ;  </span><br><span class="line">        cityNum = <span class="number">0</span> ;  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= road ; ++i){  </span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c) ;  </span><br><span class="line">            <span class="built_in">map</span>[a][b] = <span class="built_in">map</span>[b][a] = c ;  </span><br><span class="line">            cityNum = max (cityNum, max (a, b)) ;  </span><br><span class="line">        }  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= neigh ; ++i){  </span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;a) ;  </span><br><span class="line">            <span class="built_in">map</span>[<span class="number">0</span>][a] = <span class="built_in">map</span>[a][<span class="number">0</span>] = <span class="number">0</span> ;  </span><br><span class="line">        }  </span><br><span class="line">        <span class="comment">//以上步骤实现了构建map</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= dest ; ++i) </span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;want[i]) ;  </span><br><span class="line">        dijkstra () ;  </span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"%d\n"</span>, minTime) ;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;  </span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><h2 id="二参考相关文章链接">二、参考相关文章链接:</h2><p>1、<a href="https://zhuanlan.zhihu.com/p/338414118">Dijkstra算法详解 通俗易懂</a></p>]]></content>
      
      
      <categories>
          
          <category> 分类6                   （算法） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>51单片机</title>
      <link href="/2023/08/24/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%BF%E7%9C%9F/"/>
      <url>/2023/08/24/51%E5%8D%95%E7%89%87%E6%9C%BA%E4%BB%BF%E7%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="傻瓜式51单片机仿真入门练习">傻瓜式51单片机仿真入门练习</h1><p>首先需要准备好两个软件（keil5需要安装51库）</p><p><img src="https://bot.zzuli.life/clip_image002.png"><img src="https://bot.zzuli.life/clip_image004.png"></p><p>打开proteus</p><p><img src="https://bot.zzuli.life/clip_image006.jpg"></p><p>新建一个project</p><p><img src="https://bot.zzuli.life/clip_image008.jpg"></p><p>保持Next即可</p><p><img src="https://bot.zzuli.life/clip_image010.jpg"><img src="https://bot.zzuli.life/clip_image012.jpg"><img src="https://bot.zzuli.life/clip_image014.jpg"><img src="https://bot.zzuli.life/clip_image016.jpg"><img src="https://bot.zzuli.life/clip_image018.jpg"></p><p>新建项目之后，点击”P”图标</p><p><img src="https://bot.zzuli.life/clip_image020.jpg"></p><p>首先在搜索框输入AT89C52，然后双击第一个选项（双击后不要点确定）</p><p><img src="https://bot.zzuli.life/clip_image022.jpg"></p><p>接着继续在搜索框中输入RES，并双击第一个选项（双击后不要点确定）</p><p><img src="https://bot.zzuli.life/clip_image024.jpg"></p><p>最后在搜索框中输入LED，然后找到category，在里面找到optoelectronics，点击之后在右边找到LED-RED，双击此项，之后点击确定</p><p><img src="https://bot.zzuli.life/clip_image026.jpg"></p><p>可以看出左边栏多了“AT89C52”、“LED-RED”、“RES”三个元器件名</p><p><img src="https://bot.zzuli.life/clip_image028.jpg"></p><p>点击元器件名字，即可将元件添加到电路中</p><p><img src="https://bot.zzuli.life/clip_image030.jpg"></p><p>通过右键元器件，可进行调整元器件方向</p><p><img src="https://bot.zzuli.life/clip_image032.jpg"></p><p>通过添加元器件、调整元器件的方向，绘制成如下电路</p><p><img src="https://bot.zzuli.life/clip_image034.jpg"></p><p>双击电阻，调整电阻的大小为200Ω</p><p><img src="https://bot.zzuli.life/clip_image036.jpg"></p><p>在右边侧栏中找到Terminals Mode，然后点击Power元器件，添加电源到电路中</p><p><img src="https://bot.zzuli.life/clip_image038.jpg"></p><p>双击电源,选择string中的Vcc选项</p><p><img src="https://bot.zzuli.life/clip_image040.jpg"></p><p>最终电路图搭好如下图</p><p><img src="https://bot.zzuli.life/clip_image042.jpg"></p><p>接下来开始代码程序的编写（请勿关闭proteus），首先打开keil5，找到project，点击第一个选项</p><p><img src="https://bot.zzuli.life/clip_image044.jpg"></p><p>将项目命名为led，点击保存</p><p><img src="https://bot.zzuli.life/clip_image046.jpg"></p><p>使用快捷键”Ctrl”+”N”新建文件</p><p><img src="https://bot.zzuli.life/clip_image048.jpg"></p><p>按下快捷键”Ctrl”+”S”保存文件，将文件命名为led.c <img src="https://bot.zzuli.life/clip_image050.jpg"></p><p>双击source group1，文件名输入led.c，然后点击add进行添加（没有source group1可能是被折叠了，点击target1旁边的”+”即可）</p><p><img src="https://bot.zzuli.life/clip_image052.jpg"></p><p>在led.c文件完成项目代码的编写（没有led.c文件，可点击source group1旁边的”+”进行展开）</p><p><img src="https://bot.zzuli.life/clip_image054.jpg"></p><p>以下为代码源码及注释</p><p>#include&lt;reg52.h&gt; sbit led1=P1^0;//指向P1.0口 main() { led1 = 0;//使此处引脚为低电平 }</p><p>点击target，选择output选项，将create HEX file勾上，然后点击OK <img src="https://bot.zzuli.life/clip_image056.jpg"></p><p>点击translate、build图标</p><p><img src="https://bot.zzuli.life/clip_image058.jpg"><img src="https://bot.zzuli.life/clip_image060.jpg"></p><p>编译、Build之后的结果应该如下图一致</p><p><img src="https://bot.zzuli.life/clip_image062.jpg"> <img src="https://bot.zzuli.life/clip_image064.jpg"></p><p>返回到proteus，双击我们的单片机</p><p><img src="https://bot.zzuli.life/clip_image066.jpg"></p><p>点击program file右边的文件夹图标，找到生成的led.hex文件</p><p><img src="https://bot.zzuli.life/clip_image068.jpg"></p><p><img src="https://bot.zzuli.life/clip_image070.jpg"></p><p>打开文件后，点击OK</p><p><img src="https://bot.zzuli.life/clip_image072.jpg"></p><p>最后我们开始模拟仿真！</p><p><img src="https://bot.zzuli.life/clip_image074.jpg"></p><p>仿真开始后，我们能看到p1.0口是蓝色的灯，这说明P1.0口为低电平，与代码设计的逻辑一致。</p><p><img src="https://bot.zzuli.life/clip_image076.jpg"></p><p>既然可以控制高、低电平，那么我们就可以写一个闪烁灯的代码</p><p><img src="https://bot.zzuli.life/clip_image078.jpg"></p><p>以下为源码及注释</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#include&lt;reg52.h&gt;</span><br><span class="line">sbit led1=P1^0;//指向P1.0口</span><br><span class="line">void delay500(){//延迟500ms的函数</span><br><span class="line">    unsigned char a,b,c;</span><br><span class="line">    for(c=205;c&gt;0;c--)</span><br><span class="line">        for(b=116;b&gt;0;b--)</span><br><span class="line">            for(a=1;a&gt;0;a--);</span><br><span class="line">}</span><br><span class="line">main() {</span><br><span class="line">    while(1){</span><br><span class="line">        led1=0;//设为低电平</span><br><span class="line">        delay500();//延迟0.5s</span><br><span class="line">        led1=1;//设为高电平</span><br><span class="line">        delay500();//延迟0.5s</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>每次更新代码后都要重新translate、build</p><p><img src="https://bot.zzuli.life/clip_image079.jpg"><img src="https://bot.zzuli.life/clip_image080.jpg"></p><p>返回到proteus，重新模拟仿真</p><p><img src="https://bot.zzuli.life/clip_image082.jpg"></p><p>若成功运行，则出现下图效果</p><p><img src="https://bot.zzuli.life/clip_image083.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 分类7                   （单片机） </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
